This dictionnary will help me find information faster on the kaggle Python Fundamentals free course.

1 : Hello Python
    print(), =, PEMDAS operations ope, type(), float() and int(), min(), max(), abs().

2 : Functions and Getting help
    help() ( holy shit it's really usefull actually ), def...() docstring, print(sep=''), def(who='Colin'), max(key=), round(num, -1),

3 : Booleans and Conditionals
    booleans operators, and, or, not, bool()

4 : List and Tuples
    [], slicing, len(), sorted(), sum(), max(), .imag, bit_length(), method, .append(), .pop(), .index(), in, () or none

5 : Loops and List Comprehensions
    for .. in .., range(), while, 
    squares = [n**2 for n in range(10)], 
    short_planet = [planet for planet in planet if len(planet) < 6], 
    lourd_short_planets = [planet.upper() + '!' for planet in planet if len(planet) < 6]
    [ 
        planeT.upper() + '!'
        for planet in planets 
        if len(planet) < 6
    ]
    len([num for num in nums if num < 0])
    sum([num < 0 for num in nums])

6 : Strings and Dictionaries
    \, """...""", end='', string[0], len(), [char + '!' for char in planet], .upper(), .lower(), .index(), startswith(), endswith(), .split(), str.join(), str.format() ( "{} ... {} ..".format(a, b)),
    
    Dictionnaries are data structure for mappings key to values.
    numbers = {'one': 1, 'two':2, 'three':3}, numbers['eleven'] = 11
    # {'one': 1, 'two': 2, 'three': 3, 'eleven': 11}
    numbers['one'] = 'Pluto'
    # {'one': 'Pluto', 'two': 2, 'three': 3, 'eleven': 11}

    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']
    planet_to_initial = {planet: planet[0] for planet in planets}
    {'Mercury': 'M',
    'Venus': 'V',
    'Earth': 'E',
    'Mars': 'M',
    'Jupiter': 'J',
    'Saturn': 'S',
    'Uranus': 'U',
    'Neptune': 'N'}
    the "in" tells us whether something is a key in the dictionnary (True or False)
    for k in numbers:
        print("{} = {}".format(k, numbers[k]))
    for planet, initial in planet_to_initial.items():
        print("{} begins with \"{}\"".format(planet.rjust(10), initial))

7 : Libraries
    import, dir(), import as
